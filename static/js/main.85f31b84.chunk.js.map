{"version":3,"sources":["ui/agenda-card/AgendaCard.tsx","ui/agenda-list/speakers/Speakers.tsx","ui/agenda-list/AgendaList.tsx","ui/agenda-content/AgendaContent.tsx","hooks/use-powerplace-api.ts","App.tsx","helpers/group-agenda-items-by-startTime.ts","index.tsx"],"names":["AgendaCard","memo","title","children","Card","Box","padding","Typography","variant","fontSize","fontWeight","Speakers","speakers","length","data-testid","style","fontStyle","map","name","join","AgendaList","items","List","id","startTime","endTime","ListItem","ListItemText","color","dayjs","format","AgendaContent","marginTop","bgcolor","usePowerplaceApi","resourceName","setStateActionDispatcher","middleware","useEffect","fetch","then","response","json","App","useState","areas","setAreas","agenda","setAgenda","data","Object","entries","reduce","key","value","item","concat","groupAgendaItemsByStartTime","Container","margin","textAlign","Grid","container","height","justifyContent","alignContent","spacing","columns","xs","sm","md","date","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85f31b84.chunk.js","sourcesContent":["import { Card, Box, Typography } from '@mui/material';\nimport { memo, ReactNode } from 'react';\n\ntype AgendaCardProps = {\n  title: string;\n  children: ReactNode;\n};\n\nexport const AgendaCard = memo(function AgendaCard({ title, children }: AgendaCardProps) {\n  return (\n    <Card>\n      <Box padding=\".5rem 1rem\">\n        <Typography variant=\"h2\" fontSize=\"20px\" fontWeight=\"500\">\n          {title}\n        </Typography>\n\n        {children}\n      </Box>\n    </Card>\n  );\n});\n","import { memo } from 'react';\n\nexport type Speaker = {\n  id: number;\n  name: string;\n};\n\ntype SpeakersProps = {\n  speakers: Speaker[];\n};\n\nexport const Speakers = memo(function Speakers({ speakers }: SpeakersProps) {\n  if (speakers.length === 0) {\n    return null;\n  }\n\n  return (\n    <span data-testid=\"agenda-point-speakers\" style={{ fontStyle: 'italic' }}>\n      ({speakers.map(({ name }) => name).join(', ')})\n    </span>\n  );\n});\n","import { List, ListItem, ListItemText } from '@mui/material';\nimport dayjs from 'dayjs';\nimport { memo } from 'react';\nimport { Speaker, Speakers } from './speakers/Speakers';\n\nexport type AgendaItem = {\n  id: number;\n  areaId: number;\n  name: string;\n  startTime: string;\n  endTime: string;\n  speakers: Speaker[];\n};\n\ntype AgendaListProps = {\n  items: AgendaItem[];\n};\n\nexport const AgendaList = memo(function AgendaList({ items }: AgendaListProps) {\n  return (\n    <List>\n      {items.map(({ id, name, speakers, startTime, endTime }) => (\n        <ListItem key={id}>\n          <ListItemText>\n            <span style={{ color: '#848484' }}>\n              {dayjs(startTime).format('HH-mm')} {dayjs(endTime).format('HH-mm')}\n            </span>{' '}\n            <span>{name}</span> <Speakers speakers={speakers} />\n          </ListItemText>\n        </ListItem>\n      ))}\n    </List>\n  );\n});\n","import { Box, Typography } from '@mui/material';\nimport { memo } from 'react';\nimport { AgendaItem, AgendaList } from '../agenda-list/AgendaList';\n\ntype AgendaContentProps = {\n  title: string;\n  items: AgendaItem[];\n};\n\nexport const AgendaContent = memo(function AgendaContent({ title, items }: AgendaContentProps) {\n  return (\n    <Box data-testid=\"agenda-content\">\n      <Typography\n        variant=\"h3\"\n        fontSize=\"20px\"\n        padding=\".4rem .7rem\"\n        marginTop=\".6rem\"\n        fontWeight=\"500\"\n        bgcolor=\"#ececec\"\n      >\n        {title}\n      </Typography>\n\n      <AgendaList items={items} />\n    </Box>\n  );\n});\n","import { Dispatch, SetStateAction, useEffect } from 'react';\n\ntype UsePowerPlaceApiParams<ResultType, RawApiType> = {\n  resourceName: 'areas' | 'agenda';\n  setStateActionDispatcher: Dispatch<SetStateAction<ResultType>>;\n  middleware?: (data: RawApiType) => ResultType;\n};\n\nexport function usePowerplaceApi<ResultType, RawApiResponseType = Record<string | number, any>>({\n  resourceName,\n  setStateActionDispatcher,\n  middleware,\n}: UsePowerPlaceApiParams<ResultType, RawApiResponseType>) {\n  useEffect(() => {\n    fetch(`https://dev.powerplace.online/api/v1/test/${resourceName}`)\n      .then(response => response.json())\n      .then(middleware)\n      .then(setStateActionDispatcher);\n  }, [resourceName, setStateActionDispatcher, middleware]);\n}\n","import { Container, Grid, Typography } from '@mui/material';\nimport { useState } from 'react';\nimport { AgendaCard } from './ui/agenda-card/AgendaCard';\nimport { AgendaContent } from './ui/agenda-content/AgendaContent';\nimport { usePowerplaceApi } from './hooks/use-powerplace-api';\nimport {\n  groupAgendaItemsByStartTime,\n  AgendaMap,\n  AgendaApiResponseData,\n} from './helpers/group-agenda-items-by-startTime';\n\ntype Area = {\n  id: number;\n  title: string;\n};\n\nfunction App() {\n  const [areas, setAreas] = useState<Area[]>([]);\n  const [agenda, setAgenda] = useState<AgendaMap>({});\n\n  usePowerplaceApi({ resourceName: 'areas', setStateActionDispatcher: setAreas });\n  usePowerplaceApi({\n    resourceName: 'agenda',\n    middleware: (data: AgendaApiResponseData) => groupAgendaItemsByStartTime(data),\n    setStateActionDispatcher: setAgenda,\n  });\n\n  return (\n    <Container>\n      <Typography variant=\"h1\" fontSize=\"24px\" fontWeight=\"500\" margin=\"2rem\" textAlign=\"center\">\n        Расписание\n      </Typography>\n\n      <Grid\n        container\n        height=\"100%\"\n        padding=\"0 1rem 0 1rem\"\n        justifyContent=\"center\"\n        alignContent=\"center\"\n        spacing={4}\n        columns={{ xs: 4, sm: 8, md: 12 }}\n      >\n        {areas.length > 0 &&\n          areas.map(({ id, title }) => (\n            <Grid item xs={8} sm={6} md={4} key={id}>\n              <AgendaCard title={title}>\n                {agenda[id] &&\n                  Object.entries(agenda[id]).map(([date, items]) => (\n                    <AgendaContent key={`${id}#${date}`} title={date} items={items} />\n                  ))}\n              </AgendaCard>\n            </Grid>\n          ))}\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import dayjs from 'dayjs';\nimport { AgendaItem } from '../ui/agenda-list/AgendaList';\n\nexport type AgendaApiResponseData = Record<number, AgendaItem[]>;\nexport type AgendaMap = Record<number, Record<string, AgendaItem[]>>;\n\nexport const groupAgendaItemsByStartTime = (data: AgendaApiResponseData): AgendaMap =>\n  Object.entries(data).reduce<AgendaMap>(\n    (map, [key, value]) => ({\n      ...map,\n\n      [key]: value.reduce<AgendaMap[number]>(\n        (map, item) => ({\n          ...map,\n\n          [dayjs(item.startTime).format('MM.DD.YYYY')]: (map[dayjs(item.startTime).format('MM.DD.YYYY')] ?? []).concat(\n            item,\n          ),\n        }),\n\n        {},\n      ),\n    }),\n\n    {},\n  );\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}